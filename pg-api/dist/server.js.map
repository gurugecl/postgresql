{"version":3,"sources":["../server.js"],"names":["express","require","bodyParser","morgan","pg","cors","PORT","pool","Pool","user","database","password","host","port","max","app","use","json","urlencoded","extended","request","response","next","header","delete","id","params","connect","err","db","done","status","send","query","Number","result","message","get","respone","table","rows","post","country_name","body","continent_name","values","console","log","end","listen"],"mappings":";;AAAA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,aAAaD,QAAQ,aAAR,CAAjB;AACA,IAAIE,SAASF,QAAQ,QAAR,CAAb;AACA,IAAIG,KAAKH,QAAQ,IAAR,CAAT;AACA,IAAII,OAAOJ,QAAQ,MAAR,CAAX;AACA,IAAMK,OAAQ,IAAd;;AAEA,IAAIC,OAAO,IAAIH,GAAGI,IAAP,CAAY;AACnBC,UAAM,UADa;AAEnBC,cAAU,WAFS;AAGnBC,cAAU,WAHS;AAInBC,UAAM,WAJa;AAKnBC,UAAM,IALa;AAMnBC,SAAI;AANe,CAAZ,CAAX;;AASA,IAAIC,MAAMf,SAAV;AACAe,IAAIC,GAAJ,CAAQX,MAAR;AACAU,IAAIC,GAAJ,CAAQd,WAAWe,IAAX,EAAR;AACAF,IAAIC,GAAJ,CAAQd,WAAWgB,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;;AAEAJ,IAAIC,GAAJ,CAAQb,OAAO,KAAP,CAAR;;AAEAY,IAAIC,GAAJ,CAAQ,UAASI,OAAT,EAAkBC,QAAlB,EAA4BC,IAA5B,EAAkC;AACtCD,aAASE,MAAT,CAAgB,6BAAhB,EAA+C,GAA/C;AACAF,aAASE,MAAT,CAAgB,8BAAhB,EAAgD,gDAAhD;AACAD;AACH,CAJD;;AAMAP,IAAIS,MAAJ,CAAW,iBAAX,EAA8B,UAAUJ,OAAV,EAAmBC,QAAnB,EAA4B;AACtD,QAAII,KAAKL,QAAQM,MAAR,CAAeD,EAAxB;AACAlB,SAAKoB,OAAL,CAAa,UAASC,GAAT,EAAcC,EAAd,EAAkBC,IAAlB,EAAuB;AAChC,YAAGF,GAAH,EAAQ;AACJ,mBAAOP,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BJ,GAA1B,CAAP;AACH,SAFD,MAGK;AACDC,eAAGI,KAAH,CAAS,qCAAT,EAAgD,CAACC,OAAOT,EAAP,CAAD,CAAhD,EAA8D,UAAUG,GAAV,EAAeO,MAAf,EAAsB;AAChFL;AACA,oBAAGF,GAAH,EAAQ;AACJ,2BAAOP,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BJ,GAA1B,CAAP;AACH,iBAFD,MAGK;AACD,2BAAOP,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,EAACI,SAAS,4BAAV,EAA1B,CAAP;AACH;AACJ,aARD;AASH;AACJ,KAfD;AAgBH,CAlBD;;AAoBA;AACArB,IAAIsB,GAAJ,CAAQ,gBAAR,EAA0B,UAAUjB,OAAV,EAAmBkB,OAAnB,EAA4B;AAClD/B,SAAKoB,OAAL,CAAa,UAAUC,GAAV,EAAeC,EAAf,EAAmBC,IAAnB,EAAyB;AAClC,YAAGF,GAAH,EAAQ;AACJ,mBAAOP,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BJ,GAA1B,CAAP;AACH,SAFD,MAGK;AACDC,eAAGI,KAAH,CAAS,yBAAT,EAAoC,UAAUL,GAAV,EAAeW,KAAf,EAAqB;AACrDT;AACA,oBAAGF,GAAH,EAAQ;AACJ,2BAAOP,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BJ,GAA1B,CAAP;AACH,iBAFD,MAGK;AACD,2BAAOP,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BO,MAAMC,IAAhC,CAAP;AACH;AACJ,aARD;AASH;AACJ,KAfD;AAgBH,CAjBD;;AAmBA;AACAzB,IAAI0B,IAAJ,CAAS,kBAAT,EAA6B,UAASrB,OAAT,EAAkBC,QAAlB,EAA4B;AACjD,QAAIqB,eAAetB,QAAQuB,IAAR,CAAaD,YAAhC;AACA,QAAIE,iBAAiBxB,QAAQuB,IAAR,CAAaC,cAAlC;AACA,QAAInB,KAAKL,QAAQuB,IAAR,CAAalB,EAAtB;AACA,QAAIoB,SAAS,CAACH,YAAD,EAAeE,cAAf,EAA+BnB,EAA/B,CAAb;AACAlB,SAAKoB,OAAL,CAAa,UAACC,GAAD,EAAMC,EAAN,EAAUC,IAAV,EAAmB;AAChC,YAAIF,GAAJ,EAAS;AACL,mBAAOP,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BJ,GAA1B,CAAP;AACH,SAFD,MAGK;AACDC,eAAGI,KAAH,CAAS,6EAAT,YAA4FY,MAA5F,GAAqG,UAACjB,GAAD,EAAMW,KAAN,EAAgB;AACjHT;AACA,oBAAIF,GAAJ,EAAS;AACL,2BAAOP,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BJ,GAA1B,CAAP;AACH,iBAFD,MAGK;AACDkB,4BAAQC,GAAR,CAAY,eAAZ;AACAlB,uBAAGmB,GAAH;AACA3B,6BAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,EAACI,SAAS,eAAV,EAA1B;AACP;AACJ,aAVG;AAWP;AACJ,KAjBO;AAmBH,CAxBL;;AA0BArB,IAAIkC,MAAJ,CAAW3C,IAAX,EAAiB;AAAA,WAAMwC,QAAQC,GAAR,CAAY,uBAAuBzC,IAAnC,CAAN;AAAA,CAAjB","file":"server.js","sourcesContent":["let express = require('express');\r\nlet bodyParser = require('body-parser');\r\nlet morgan = require('morgan');\r\nlet pg = require('pg');\r\nlet cors = require('cors');\r\nconst PORT  = 3000;\r\n\r\nlet pool = new pg.Pool({\r\n    user: 'postgres',\r\n    database: 'countries',\r\n    password: 'clayton17',\r\n    host: 'localhost',\r\n    port: 5432,\r\n    max:10\r\n});\r\n\r\nlet app = express();\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\napp.use(morgan('dev'));\r\n\r\napp.use(function(request, response, next) {\r\n    response.header(\"Access-Control-Allow-Origin\", \"*\");\r\n    response.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n    next();\r\n});\r\n\r\napp.delete('/api/remove/:id', function (request, response){\r\n    let id = request.params.id;\r\n    pool.connect(function(err, db, done){\r\n        if(err) {\r\n            return response.status(400).send(err)\r\n        }\r\n        else {\r\n            db.query('DELETE FROM countries WHERE id = $1', [Number(id)], function (err, result){\r\n                done();\r\n                if(err) {\r\n                    return response.status(400).send(err)\r\n                }\r\n                else {\r\n                    return response.status(200).send({message: 'success in deleting record'})\r\n                }\r\n            })\r\n        }\r\n    })\r\n});\r\n\r\n//getting data back from postgres\r\napp.get('/api/countries', function (request, respone) {\r\n    pool.connect(function (err, db, done) {\r\n        if(err) {\r\n            return response.status(400).send(err)\r\n        }\r\n        else {\r\n            db.query('SELECT * FROM countries', function (err, table){\r\n                done();\r\n                if(err) {\r\n                    return response.status(400).send(err)\r\n                }\r\n                else {\r\n                    return response.status(200).send(table.rows)\r\n                }\r\n            })\r\n        }\r\n    })\r\n});\r\n\r\n//posting data to postgres\r\napp.post('/api/new-country', function(request, response) {\r\n        let country_name = request.body.country_name;\r\n        let continent_name = request.body.continent_name;\r\n        let id = request.body.id;\r\n        let values = [country_name, continent_name, id];\r\n        pool.connect((err, db, done) => {\r\n        if (err) {\r\n            return response.status(400).send(err);\r\n        }\r\n        else {\r\n            db.query('INSERT INTO countries (country_name, continent_name, id) VALUES($1, $2, $3)', [...values], (err, table) => {\r\n                done();\r\n                if (err) {\r\n                    return response.status(400).send(err);\r\n                }\r\n                else {\r\n                    console.log('DATA INSERTED');\r\n                    db.end();\r\n                    response.status(201).send({message: 'Data inserted'});\r\n            }\r\n        })\r\n    }\r\n});\r\n\r\n    });\r\n\r\napp.listen(PORT, () => console.log('Listening on port ' + PORT));"]}